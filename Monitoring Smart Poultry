#include <Adafruit_ADS1X15.h>
#include <movingAvg.h>
#include <AntaresESP32MQTT.h>

#define ACCESSKEY "b07f83b1409132e9:84c6cc0b97b86892"
#define WIFISSID "DBT"
#define PASSWORD "telkom2021"
#define projectName "TempTron"
#define deviceName "test"

AntaresESP32MQTT antares(ACCESSKEY);

unsigned long previousMillis = 0;
const long interval = 3000;

movingAvg maf_temp1(10);
movingAvg maf_temp2(10);
movingAvg maf_temp3(10);
movingAvg maf_temp4(10);
movingAvg maf_temp5(10);
movingAvg maf_humd(10);
movingAvg maf_speed1(10);
movingAvg maf_speed2(10);

Adafruit_ADS1115 ads1;
Adafruit_ADS1115 ads2;

int16_t adc_temp1;
int16_t adc_temp2;
int16_t adc_temp3;
int16_t adc_temp4;
int16_t adc_temp5;

int16_t adc_humd;
int16_t adc_pwm1;
int16_t adc_pwm2;

boolean sts_alarm = false;
boolean sts_heat = false;
boolean sts_cool = false;
boolean sts_fan1 = false;
boolean sts_fan2 = false;
boolean sts_fan3 = false;
boolean sts_fan4 = false;
boolean sts_fan5 = false;

double temp1;
double temp2;
double temp3;
double temp4;
double temp5;
double humd;
double speed1;
double speed2;

#define p_alarm 39
#define p_heat 34
#define p_fan1 35
#define p_fan2 32
#define p_fan3 13
#define p_fan4 25
#define p_fan5 26
#define p_cool 27
#define p_water 18
#define p_feed 19

unsigned long count_water;


void setup(void)
{
  Serial.begin(115200);

  antares.setDebug(true);
  antares.wifiConnection(WIFISSID, PASSWORD);
  antares.setMqttServer();

  maf_temp1.begin();
  maf_temp2.begin();
  maf_temp3.begin();
  maf_temp4.begin();
  maf_temp5.begin();

  maf_humd.begin();
  maf_speed1.begin();
  maf_speed2.begin();

  ads1.begin(0x48);
  ads2.begin(0x49);

  pinMode(p_alarm, INPUT_PULLUP);
  pinMode(p_heat, INPUT_PULLUP);
  pinMode(p_cool, INPUT_PULLUP);
  pinMode(p_fan1, INPUT_PULLUP);
  pinMode(p_fan2, INPUT_PULLUP);
  pinMode(p_fan3, INPUT_PULLUP);
  pinMode(p_fan4, INPUT_PULLUP);
  pinMode(p_fan5, INPUT_PULLUP);

  pinMode(p_water, INPUT);
  pinMode(p_feed, INPUT);

}

void loop(void)
{
  antares.checkMqttConnection("082321376118");

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval)
  {
    send_antares();
    previousMillis = currentMillis;
  }

  read_sensor();
  debug(true);
  delay(250);
}

void send_antares()
{
  antares.add("temp1", String(temp1,1));
  antares.add("temp2", String(temp2,1));
  antares.add("temp3", String(temp3,1));
  antares.add("temp4", String(temp4,1));
  antares.add("temp5", String(temp5,1));
  antares.add("humd", String(humd,0));
  antares.add("spSpeed", String(speed1,0));
  antares.add("spSpeed2", String(speed2,0));
  antares.add("countWaterMeter", String(count_water));
  antares.add("stsAlarm", String(int(sts_alarm)));
  antares.add("stsHeat", String(int(sts_heat)));
  antares.add("stsCool", String(int(sts_cool)));
  antares.add("stsFan1", String(int(sts_fan1)));
  antares.add("stsFan2", String(int(sts_fan2)));
  antares.add("stsFan3", String(int(sts_fan3)));
  antares.add("stsFan4", String(int(sts_fan4)));
  antares.add("stsFan5", String(int(sts_fan5)));
  
  antares.publish(projectName, deviceName);
}

void read_sensor()
{
  //////////////////
  sts_alarm = digitalRead(p_alarm);
  sts_heat = !digitalRead(p_heat);
  sts_cool = !digitalRead(p_cool);
  sts_fan1 = !digitalRead(p_fan1);
  sts_fan2 = !digitalRead(p_fan2);
  sts_fan3 = !digitalRead(p_fan3);
  sts_fan4 = !digitalRead(p_fan4);
  sts_fan5 = !digitalRead(p_fan5);

  ///////////////////
  adc_humd = ads1.readADC_SingleEnded(1);
  adc_pwm1 = ads1.readADC_SingleEnded(2);
  adc_pwm2 = ads1.readADC_SingleEnded(3);
  adc_temp1 = ads2.readADC_SingleEnded(0);
  adc_temp2 = ads2.readADC_SingleEnded(1);
  adc_temp3 = ads2.readADC_SingleEnded(2);
  adc_temp4 = ads2.readADC_SingleEnded(3);
  adc_temp5 = ads1.readADC_SingleEnded(0);

  temp1 = maf_temp1.reading(regress_temp(adc_temp1) * 100) / 100;
  temp2 = maf_temp2.reading(regress_temp(adc_temp2) * 100) / 100;
  temp3 = maf_temp3.reading(regress_temp(adc_temp3) * 100) / 100;
  temp4 = maf_temp4.reading(regress_temp(adc_temp4) * 100) / 100;
  temp5 = maf_temp5.reading(regress_temp(adc_temp5) * 100) / 100;

  humd = maf_humd.reading(regress_humd(adc_humd));
  speed1 = maf_speed1.reading(regress_pwm(adc_pwm1));
  speed2 = maf_speed2.reading(regress_pwm(adc_pwm2));


  ///////////////////
  if (digitalRead(p_water))
  {
    count_water++;
  }

}

void debug(boolean state)
{
  if (state)
  {
    Serial.print("Temp 1 : ");
    Serial.println(temp1, 1);
    Serial.print("Temp 2 : ");
    Serial.println(temp2, 1);
    Serial.print("Temp 3 : ");
    Serial.println(temp3, 1);
    Serial.print("Temp 4 : ");
    Serial.println(temp4, 1);
    Serial.print("Temp 5 : ");
    Serial.println(temp5, 1);
    Serial.println();

    Serial.print("Humd : ");
    Serial.println(humd, 0);
    Serial.print("Speed 1 : ");
    Serial.println(speed1, 0);
    Serial.println();

    Serial.print("Status Alarm: ");
    Serial.println(state_string(sts_alarm));
    Serial.print("Status Heater: ");
    Serial.println(state_string(sts_heat));
    Serial.print("Status Fan 1: ");
    Serial.println(state_string(sts_fan1));
    Serial.print("Status Fan 2: ");
    Serial.println(state_string(sts_fan2));
    Serial.print("Status Fan 3: ");
    Serial.println(state_string(sts_fan3));
    Serial.print("Status Fan 4: ");
    Serial.println(state_string(sts_fan4));
    Serial.print("Status Fan 5: ");
    Serial.println(state_string(sts_fan5));
    Serial.print("Status Cooler: ");
    Serial.println(state_string(sts_cool));
    Serial.println();

    Serial.print("Water Meter : ");
    Serial.print(count_water);
    Serial.println(" Liter");
    Serial.println();
    Serial.println("============END============");
    Serial.println();
    Serial.println();
  }
}

double regress_humd(double x)
{
  double humdx = (0.00362 * x) + 33.122;
  return humdx;
}


String state_string(boolean state)
{
  String output;
  if (state)
  {
    return "ON";
  }
  else
  {
    return "OFF";
  }
}


double regress_pwm(double x) {
  double terms[] = {
    5.9396562741696546e-001,
    3.8790041948290675e-003,
    -5.4854232076508256e-010
  };

  double t = 1;
  double r = 0;
  for (double c : terms) {
    r += c * t;
    t *= x;
  }
  return r;
}


double regress_temp(double x)
{
  x = x / 25.6;
  int i;
  double terms[] = {
    -1.3416997484383398e+002,
    3.0692331514589997e+000,
    -1.9585473265503389e-002,
    6.4792999247996778e-005,
    -1.2510944173100613e-007,
    1.4196092245388155e-010,
    -8.7941206823462161e-014,
    2.2969742660995184e-017
  };

  size_t csz = sizeof terms / sizeof * terms;

  double t = 1;
  double r = 0;
  for (i = 0; i < csz; i++) {
    r += terms[i] * t;
    t *= x;
  }
  return r;
}